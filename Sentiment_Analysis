import pandas as pd
import numpy as np
tweetdata=pd.read_csv("E:\\SMU Academics\\python for data science\\project\\project\\Python\\trumptweets.csv")
tweetdata['date'] = pd.to_datetime(tweetdata['date']).dt.strftime('%m/%d/%Y')
tre_rate_data=pd.read_table("E:\\SMU Academics\\python for data science\\project\\project\\Python\\YieldCurve.txt",sep="\t")
tre_rate_data['Date'] = pd.to_datetime(tre_rate_data['Date']).dt.strftime('%m/%d/%Y')


data = pd.DataFrame(data=tweetdata)
# We display the first 10 elements of the dataframe:
display(data.head(10))


from textblob import TextBlob
import re

def clean_tweet(tweet):
    '''
    Utility function to clean the text in a tweet by removing 
    links and special characters using regex.
    '''
    return ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)", " ", tweet).split())

def analize_sentiment(tweet):
    '''
    Utility function to classify the polarity of a tweet
    using textblob.
    '''
    analysis = TextBlob(clean_tweet(tweet))
    if analysis.sentiment.polarity > 0:
        return 1
    elif analysis.sentiment.polarity == 0:
        return 0
    else:
        return -1
        
# We create a column with the result of the analysis:
data['SA'] = np.array([ analize_sentiment(tweet) for tweet in data['content'] ])

# We display the updated dataframe with the new column:
display(data.head(10))


# We construct lists with classified tweets:

pos_tweets = [ tweet for index, tweet in enumerate(data['content']) if data['SA'][index] > 0]
neu_tweets = [ tweet for index, tweet in enumerate(data['content']) if data['SA'][index] == 0]
neg_tweets = [ tweet for index, tweet in enumerate(data['content']) if data['SA'][index] < 0]


print("Percentage of positive tweets: {}%".format(len(pos_tweets)*100/len(data['content'])))
print("Percentage of neutral tweets: {}%".format(len(neu_tweets)*100/len(data['content'])))
print("Percentage de negative tweets: {}%".format(len(neg_tweets)*100/len(data['content'])))
